{"version":3,"sources":["components/CharacterCard.js","components/CharacterList.js","services/apiCharacters.js","components/App.js","reportWebVitals.js","index.js"],"names":["CharacterCard","props","src","image","alt","name","species","id","defaultProps","CharacterList","console","log","characters","charactersToRender","map","character","getInfoFromApi","fetch","then","response","json","App","useState","setCharacters","useEffect","data","results","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAEMA,G,MAAgB,SAACC,GACrB,OACE,6BACE,oCACE,qBAAKC,IAAKD,EAAME,MAAOC,IAAK,oBAAmBH,EAAMI,OACrD,6BAAKJ,EAAMI,OACX,6BAAKJ,EAAMK,cAJNL,EAAMM,MAgBnBP,EAAcQ,aAAe,CAC3BH,KAAM,wBAGOL,QCPAS,EAfO,SAACR,GACrBS,QAAQC,IAAIV,EAAMW,YAClB,IAAMC,EAAqBZ,EAAMW,WAAWE,KAAI,SAACC,GAC/C,OACE,cAAC,EAAD,CACEV,KAAMU,EAAUV,KAChBF,MAAOY,EAAUZ,MACjBG,QAASS,EAAUT,QACnBC,GAAIQ,EAAUR,QAIpB,OAAO,6BAAKM,KCNCG,EARQ,WACrB,OAAOC,MACL,uFACAC,MAAK,SAACC,GACN,OAAOA,EAASC,WCqBLC,MApBf,WAAgB,IAAD,EACuBC,mBAAS,IADhC,mBACNV,EADM,KACMW,EADN,KAab,OAJAC,qBAAU,WALRR,IAAiBE,MAAK,SAACO,GACrBF,EAAcE,EAAKC,cAMpB,IAGD,8BACE,cAAC,EAAD,CAAed,WAAYA,OCRlBe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f7164538.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\r\n\r\nconst CharacterCard = (props) => {\r\n  return (\r\n    <li key={props.id}>\r\n      <article>\r\n        <img src={props.image} alt={\"Fotografía de \" + props.name} />\r\n        <h2>{props.name}</h2>\r\n        <h3>{props.species}</h3>\r\n      </article>\r\n    </li>\r\n  );\r\n};\r\n\r\nCharacterCard.propTypes = {\r\n  name: PropTypes.string,\r\n  image: PropTypes.string,\r\n  species: PropTypes.string,\r\n};\r\n\r\nCharacterCard.defaultProps = {\r\n  name: \"Personaje anónimo\",\r\n};\r\n\r\nexport default CharacterCard;\r\n","import CharacterCard from \"./CharacterCard\";\r\n\r\nconst CharacterList = (props) => {\r\n  console.log(props.characters);\r\n  const charactersToRender = props.characters.map((character) => {\r\n    return (\r\n      <CharacterCard\r\n        name={character.name}\r\n        image={character.image}\r\n        species={character.species}\r\n        id={character.id}\r\n      />\r\n    );\r\n  });\r\n  return <ul>{charactersToRender}</ul>;\r\n};\r\nCharacterList.propTypes = {};\r\nexport default CharacterList;\r\n","const getInfoFromApi = () => {\r\n  return fetch(\r\n    \"https://raw.githubusercontent.com/Adalab/rick-y-morty/master/data/rick-y-morty.json\"\r\n  ).then((response) => {\r\n    return response.json();\r\n  });\r\n};\r\n\r\nexport default getInfoFromApi;\r\n","import \"../stylesheets/App.css\";\nimport CharacterList from \"./CharacterList\";\nimport getInfoFromApi from \"../services/apiCharacters\";\nimport { useEffect, useState } from \"react\";\n\nfunction App() {\n  const [characters, setCharacters] = useState([]);\n\n  const getApiResults = () => {\n    getInfoFromApi().then((data) => {\n      setCharacters(data.results);\n    });\n  };\n\n  useEffect(() => {\n    getApiResults();\n  }, []);\n\n  return (\n    <div>\n      <CharacterList characters={characters} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}